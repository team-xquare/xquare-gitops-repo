{{- $fullname := (printf "%s-%s-%s" .Values.name .Values.type .Values.environment) }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullname }}
  labels:
    app: {{ $fullname }}
    project: {{ .Values.name }}
    type: {{ .Values.type }}
    environment: {{ .Values.environment }}
    tags.datadoghq.com/env: {{ .Values.environment }}
    tags.datadoghq.com/service: {{ $fullname }}
spec:
  revisionHistoryLimit: 0
  {{- if .Values.replicas }}
  replicas: {{ .Values.replicas }}
  {{- end }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ $fullname }}
  template:
    metadata:      
      annotations:
        sidecar.istio.io/proxyCPU: "5m"
        sidecar.istio.io/proxyMemory: "128Mi"
      labels:
        tags.datadoghq.com/env: {{ .Values.environment }}
        tags.datadoghq.com/service: {{ $fullname }}
        {{- if eq .Values.language "java"}}
        admission.datadoghq.com/enabled: "true"
        {{- end }}
        app: {{ $fullname }}
        project: {{ .Values.name }}
        type: {{ .Values.type }}
    spec:
      nodeSelector:
        Karpenter: enabled
      tolerations:
      - effect: "PreferNoSchedule"
        key: xquare/server
        operator: "Equal"
        value: "true"
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: {{ $fullname }}
      {{- if ne .Values.serviceAccount "<nil>" }}
      serviceAccountName: {{ .Values.serviceAccount }}
      {{- end }}
      terminationGracePeriodSeconds: 120
      containers:
        - name:  {{ $fullname }}
          image: {{ .Values.imageRegistry }}/{{ .Values.name }}-{{ .Values.type }}-{{ .Values.environment }}:{{ .Values.imageTag }}
          imagePullPolicy: Always
          ports:
            - containerPort: {{ .Values.containerPort }}
          {{- if ne .Values.volume.name "<nil>" }}
          volumeMounts:
            - mountPath: {{ .Values.volume.mountPath }}
              name: {{ .Values.volume.name }}
              readOnly: true
          {{- end }}
          {{- if eq $fullname "repo-be-prod" }}
          {{- if eq .Values.language "java"}}
          env:
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: {{ $fullname }}
            - name: DD_ENV
              value: {{ .Values.environment }}
            - name: DD_TRACE_ENABLED
              value: "true"
            - name: DD_TRACE_SAMPLE_RATE
              value: "1"
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_JMXFETCH_ENABLED
              value: "true"
          {{- end }}
          resources:
            requests:
              memory: "600Mi"
              cpu: "10m"
          {{- else }}
          resources:
            requests:
              memory: "300Mi"
              cpu: "5m"
          {{- end }}
      {{- if eq .Values.language "java"}}
      initContainers:
        - name: datadog-apm-agent
          image: busybox
          command:
            - wget
            - -O
            - /datadog/apm/agent/dd-java-agent.jar
            - https://dtdg.co/latest-java-tracer
          volumeMounts:
            - name: datadog-apm-agent
              mountPath: /datadog/apm/agent
      {{- end }}
      {{- if ne .Values.volume.name "<nil>" }}
      volumes:
        - name: {{ .Values.volume.name }}
          secret:
            secretName: {{ .Values.volume.secretName }}
      {{- end }}
