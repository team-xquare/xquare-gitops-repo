{{- $fullname := (printf "%s-%s-%s" .Values.name .Values.type .Values.environment) }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullname }}
  labels:
    app: {{ $fullname }}
    project: {{ .Values.name }}
    type: {{ .Values.type }}
    environment: {{ .Values.environment }}
    tags.datadoghq.com/env: {{ .Values.environment }}
    tags.datadoghq.com/service: {{ $fullname }}
spec:
  revisionHistoryLimit: 0
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ $fullname }}
  template:
    metadata:      
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "false"
        sidecar.istio.io/proxyCPU: "5m"
        sidecar.istio.io/proxyMemory: "128Mi"
      labels:
        tags.datadoghq.com/env: {{ .Values.environment }}
        tags.datadoghq.com/service: {{ $fullname }}
        app: {{ $fullname }}
        project: {{ .Values.name }}
        type: {{ .Values.type }}
    spec:
      {{- if eq $fullname "project-secret-manager-be-prod" }}
      priorityClassName: system-cluster-critical
      {{- end }}
      nodeSelector:
        Karpenter: enabled
      tolerations:
      - effect: "NoSchedule"
        key: xquare/server
        operator: "Equal"
        value: "true"
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: {{ $fullname }}
      {{- if ne .Values.serviceAccount "<nil>" }}
      serviceAccountName: {{ .Values.serviceAccount }}
      {{- end }}
      terminationGracePeriodSeconds: 120
      containers:
        - name:  {{ $fullname }}
          image: {{ .Values.imageRegistry }}/{{ .Values.name }}-{{ .Values.type }}-{{ .Values.environment }}:{{ .Values.imageTag }}
          imagePullPolicy: Always
          ports:
            - containerPort: {{ .Values.containerPort }}
          {{- if ne .Values.volume.name "<nil>" }}
          volumeMounts:
            - mountPath: {{ .Values.volume.mountPath }}
              name: {{ .Values.volume.name }}
              readOnly: true
          {{- end }}
          envFrom:
            - secretRef:
                name: {{ $fullname }}
          resources:
            requests:
              memory: "300Mi"
              cpu: "15m"
          readinessProbe:
            tcpSocket:
              port: {{ .Values.containerPort }}
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 3
      {{- if ne .Values.volume.name "<nil>" }}
      volumes:
        - name: {{ .Values.volume.name }}
          secret:
            secretName: {{ .Values.volume.secretName }}
      {{- end }}
